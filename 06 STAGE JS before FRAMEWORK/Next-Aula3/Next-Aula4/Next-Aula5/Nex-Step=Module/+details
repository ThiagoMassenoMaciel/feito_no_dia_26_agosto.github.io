1-Conceitos de SPA
        VER TÓPICOS RELACIONADOS
        Descrição
        Nessa aula aprenderemos os conceitos do SPA, a diferença entre uma aplicação que não utiliza e outra que utiliza essa tecnologia.

2-Alterando comportamento padrão do evento de redirecionamento
        VER TÓPICOS RELACIONADOS

        Descrição
        Nessa aula começaremos a entender o comportamento de eventos no JavaScript e os conceitos de rotas em uma página web. Alteraremos o comportamento de redirecionamento utilizando o evento event.preventDefault().

3-Mapeando as rotas
        VER TÓPICOS RELACIONADOS
        Descrição
        Nessa aula mapearemos todas as rotas do nosso projeto, para isso faremos uma nova função e utilizaremos algumas propriedades do JavaScript para nos auxiliar.


        []¹ 
        desabilitou o desparo automatico com o event.preventDefault()
                por este motivo n disparar o pathname ficava igual da index.html 
        []² 
        colocou no historico da janela(console.log) q esta mudando de pagina mostrando o pathname SEM MEXER NA WINDOW do usewr 

4-  Javascript Assíncrono e Promises
CONTENT-12'
PRACTICE-1H30'
        #DUVIDAS
                why the promissed 2 return undefined when i decide return into console.log the promise 1 ?  
                look at the file EX-4-index.html
                when the promisse 2 not return undefined
                look at the file EX-4-1-index.html

        VER TÓPICOS RELACIONADOS

        Descrição
        Nessa aula aprenderemos sobre Assíncronismo e Promises no JavaScript, utilizaremos a função fetch() do JS para retornar os dados do nosso projeto.

        Código zipado

        acessando valor de uma propriedade do objeto
        valor = NOMEdoOBJETO[nomeDApopriedade]

        exemplo pra aula 36 e 37 são a mesma coisa 
        let path_home = routes["/home"]
        let path_home = routes[pathname]

        #Explicndo sincrono atrapalha o (fluxo de codigo )
                um executa exatamente depois do outro 
                se o do meio demorar 3 segundos o ultimo tambem vai ficar esperando 3 segundos

                console.log("iniciei")
                setTimeout(()=>{ console.log("executei a função assincrona")} ,200)
                console.log("terminei")

                vai exibir assim
                ________________
                iniciei
                executei a função assincrona
                terminei 




        #Explicando assincrono  não atrapalha o ( fluxo de codigo )
        fetch(prometo pegar essa coisa ).then(prometo executar issso depois de pegado a coisa )
        \__ WILL ALWAYS RETURN SOME PROMISSES
                O java script vai executando e no meio do caminho encontrar uma função que precisará esperar 
                ele continua executando o resto até executa assincrona quando ela tiver pronta 


                console.log("iniciei")
                setTimeout(()=>{ console.log("executei a função assincrona")} ,200)
                console.log("terminei")

                vai exibir assim 

                iniciei
                terminei 
                executei a função assincrona

        #resumo ordem de execuçõ do handle + fetch assincrono 

        console1
        console2
        fetch().then().then()

        console1 registou o path do link clicado acessando o objeto
        console2 exibiu o path registrado
        pegou o (path) retornou 2 promise - converteu dados para text - exibiu o html  

5-Finalizando as funcionalidades e reorganizando a aplicação
Content 7' 
practice 53'

                VER TÓPICOS RELACIONADOS
                Descrição
                Nessa aula finalizaremos as funcionalidades e reorganizaremos a nossa aplicação transformando o JS em módulos.
                Código zipado

                #Executar o handle 2 vezes     click link  initial ppage home 
                handle()
                 window.onpopstate = () => handle() ;

                ERROR INITIALIZED
                        Error initialize, Cuz the function router are not executing event default -Must to put INTO ONCLICK TAG                
                        window_rounter   
                        or
                        into the script put 
                        window_rounter =  call function to rounter()

6-

7-

8-

9-

10-

